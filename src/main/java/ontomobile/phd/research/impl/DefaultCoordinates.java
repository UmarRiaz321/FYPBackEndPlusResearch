package ontomobile.phd.research.impl;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.semanticweb.owlapi.model.IRI;

import ontomobile.phd.research.Coordinates;
import ontomobile.phd.research.Latin_Descriptive_Label;
import ontomobile.phd.research.Vocabulary;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultCoordinates <br>
 * @version generated on Tue Nov 26 14:33:01 GMT+00:00 2019 by umarriaz
 */
public class DefaultCoordinates extends WrappedIndividualImpl implements Coordinates {

    public DefaultCoordinates(CodeGenerationInference ontology, IRI iri) {
        super(ontology, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Latin_Descriptive_Label
     */
     
    public Collection<? extends Latin_Descriptive_Label> getHas_Latin_Descriptive_Label() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HAS_LATIN_DESCRIPTIVE_LABEL,
                                               DefaultLatin_Descriptive_Label.class);
    }

    public boolean hasHas_Latin_Descriptive_Label() {
	   return !getHas_Latin_Descriptive_Label().isEmpty();
    }

    public void addHas_Latin_Descriptive_Label(Latin_Descriptive_Label newHas_Latin_Descriptive_Label) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HAS_LATIN_DESCRIPTIVE_LABEL,
                                       newHas_Latin_Descriptive_Label);
    }

    public void removeHas_Latin_Descriptive_Label(Latin_Descriptive_Label oldHas_Latin_Descriptive_Label) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HAS_LATIN_DESCRIPTIVE_LABEL,
                                          oldHas_Latin_Descriptive_Label);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Stratigraphic_Relation_with
     */
     
    public Collection<? extends WrappedIndividual> getHas_Stratigraphic_Relation_with() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HAS_STRATIGRAPHIC_RELATION_WITH,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasHas_Stratigraphic_Relation_with() {
	   return !getHas_Stratigraphic_Relation_with().isEmpty();
    }

    public void addHas_Stratigraphic_Relation_with(WrappedIndividual newHas_Stratigraphic_Relation_with) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HAS_STRATIGRAPHIC_RELATION_WITH,
                                       newHas_Stratigraphic_Relation_with);
    }

    public void removeHas_Stratigraphic_Relation_with(WrappedIndividual oldHas_Stratigraphic_Relation_with) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HAS_STRATIGRAPHIC_RELATION_WITH,
                                          oldHas_Stratigraphic_Relation_with);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#is_overlain_by
     */
     
    public Collection<? extends WrappedIndividual> getIs_overlain_by() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IS_OVERLAIN_BY,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIs_overlain_by() {
	   return !getIs_overlain_by().isEmpty();
    }

    public void addIs_overlain_by(WrappedIndividual newIs_overlain_by) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IS_OVERLAIN_BY,
                                       newIs_overlain_by);
    }

    public void removeIs_overlain_by(WrappedIndividual oldIs_overlain_by) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IS_OVERLAIN_BY,
                                          oldIs_overlain_by);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#is_part_of
     */
     
    public Collection<? extends WrappedIndividual> getIs_part_of() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IS_PART_OF,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIs_part_of() {
	   return !getIs_part_of().isEmpty();
    }

    public void addIs_part_of(WrappedIndividual newIs_part_of) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IS_PART_OF,
                                       newIs_part_of);
    }

    public void removeIs_part_of(WrappedIndividual oldIs_part_of) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IS_PART_OF,
                                          oldIs_part_of);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#is_part_of_spatial
     */
     
    public Collection<? extends WrappedIndividual> getIs_part_of_spatial() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IS_PART_OF_SPATIAL,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIs_part_of_spatial() {
	   return !getIs_part_of_spatial().isEmpty();
    }

    public void addIs_part_of_spatial(WrappedIndividual newIs_part_of_spatial) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IS_PART_OF_SPATIAL,
                                       newIs_part_of_spatial);
    }

    public void removeIs_part_of_spatial(WrappedIndividual oldIs_part_of_spatial) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IS_PART_OF_SPATIAL,
                                          oldIs_part_of_spatial);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#is_part_of_temporal
     */
     
    public Collection<? extends WrappedIndividual> getIs_part_of_temporal() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IS_PART_OF_TEMPORAL,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIs_part_of_temporal() {
	   return !getIs_part_of_temporal().isEmpty();
    }

    public void addIs_part_of_temporal(WrappedIndividual newIs_part_of_temporal) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IS_PART_OF_TEMPORAL,
                                       newIs_part_of_temporal);
    }

    public void removeIs_part_of_temporal(WrappedIndividual oldIs_part_of_temporal) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IS_PART_OF_TEMPORAL,
                                          oldIs_part_of_temporal);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#is_subset_of
     */
     
    public Collection<? extends WrappedIndividual> getIs_subset_of() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IS_SUBSET_OF,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIs_subset_of() {
	   return !getIs_subset_of().isEmpty();
    }

    public void addIs_subset_of(WrappedIndividual newIs_subset_of) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IS_SUBSET_OF,
                                       newIs_subset_of);
    }

    public void removeIs_subset_of(WrappedIndividual oldIs_subset_of) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IS_SUBSET_OF,
                                          oldIs_subset_of);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#is_superset_of
     */
     
    public Collection<? extends WrappedIndividual> getIs_superset_of() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_IS_SUPERSET_OF,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasIs_superset_of() {
	   return !getIs_superset_of().isEmpty();
    }

    public void addIs_superset_of(WrappedIndividual newIs_superset_of) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_IS_SUPERSET_OF,
                                       newIs_superset_of);
    }

    public void removeIs_superset_of(WrappedIndividual oldIs_superset_of) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_IS_SUPERSET_OF,
                                          oldIs_superset_of);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#overlays
     */
     
    public Collection<? extends WrappedIndividual> getOverlays() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_OVERLAYS,
                                               WrappedIndividualImpl.class);
    }

    public boolean hasOverlays() {
	   return !getOverlays().isEmpty();
    }

    public void addOverlays(WrappedIndividual newOverlays) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_OVERLAYS,
                                       newOverlays);
    }

    public void removeOverlays(WrappedIndividual oldOverlays) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_OVERLAYS,
                                          oldOverlays);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Elevation_lower_limit
     */
     
    public Collection<? extends Float> getHas_Elevation_lower_limit() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_ELEVATION_LOWER_LIMIT, Float.class);
    }

    public boolean hasHas_Elevation_lower_limit() {
		return !getHas_Elevation_lower_limit().isEmpty();
    }

    public void addHas_Elevation_lower_limit(Float newHas_Elevation_lower_limit) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_ELEVATION_LOWER_LIMIT, newHas_Elevation_lower_limit);
    }

    public void removeHas_Elevation_lower_limit(Float oldHas_Elevation_lower_limit) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_ELEVATION_LOWER_LIMIT, oldHas_Elevation_lower_limit);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Elevation_upper_limit
     */
     
    public Collection<? extends Float> getHas_Elevation_upper_limit() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_ELEVATION_UPPER_LIMIT, Float.class);
    }

    public boolean hasHas_Elevation_upper_limit() {
		return !getHas_Elevation_upper_limit().isEmpty();
    }

    public void addHas_Elevation_upper_limit(Float newHas_Elevation_upper_limit) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_ELEVATION_UPPER_LIMIT, newHas_Elevation_upper_limit);
    }

    public void removeHas_Elevation_upper_limit(Float oldHas_Elevation_upper_limit) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_ELEVATION_UPPER_LIMIT, oldHas_Elevation_upper_limit);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Lower_X_Coordinate
     */
     
    public Collection<? extends Float> getHas_Lower_X_Coordinate() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_LOWER_X_COORDINATE, Float.class);
    }

    public boolean hasHas_Lower_X_Coordinate() {
		return !getHas_Lower_X_Coordinate().isEmpty();
    }

    public void addHas_Lower_X_Coordinate(Float newHas_Lower_X_Coordinate) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_LOWER_X_COORDINATE, newHas_Lower_X_Coordinate);
    }

    public void removeHas_Lower_X_Coordinate(Float oldHas_Lower_X_Coordinate) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_LOWER_X_COORDINATE, oldHas_Lower_X_Coordinate);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Lower_Y_Coordinate
     */
     
    public Collection<? extends Float> getHas_Lower_Y_Coordinate() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_LOWER_Y_COORDINATE, Float.class);
    }

    public boolean hasHas_Lower_Y_Coordinate() {
		return !getHas_Lower_Y_Coordinate().isEmpty();
    }

    public void addHas_Lower_Y_Coordinate(Float newHas_Lower_Y_Coordinate) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_LOWER_Y_COORDINATE, newHas_Lower_Y_Coordinate);
    }

    public void removeHas_Lower_Y_Coordinate(Float oldHas_Lower_Y_Coordinate) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_LOWER_Y_COORDINATE, oldHas_Lower_Y_Coordinate);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Reference
     */
     
    public Collection<? extends String> getHas_Reference() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_REFERENCE, String.class);
    }

    public boolean hasHas_Reference() {
		return !getHas_Reference().isEmpty();
    }

    public void addHas_Reference(String newHas_Reference) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_REFERENCE, newHas_Reference);
    }

    public void removeHas_Reference(String oldHas_Reference) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_REFERENCE, oldHas_Reference);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Upper_X_Coordinate
     */
     
    public Collection<? extends Float> getHas_Upper_X_Coordinate() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_UPPER_X_COORDINATE, Float.class);
    }

    public boolean hasHas_Upper_X_Coordinate() {
		return !getHas_Upper_X_Coordinate().isEmpty();
    }

    public void addHas_Upper_X_Coordinate(Float newHas_Upper_X_Coordinate) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_UPPER_X_COORDINATE, newHas_Upper_X_Coordinate);
    }

    public void removeHas_Upper_X_Coordinate(Float oldHas_Upper_X_Coordinate) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_UPPER_X_COORDINATE, oldHas_Upper_X_Coordinate);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#has_Upper_Y_Coordinate
     */
     
    public Collection<? extends Float> getHas_Upper_Y_Coordinate() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_UPPER_Y_COORDINATE, Float.class);
    }

    public boolean hasHas_Upper_Y_Coordinate() {
		return !getHas_Upper_Y_Coordinate().isEmpty();
    }

    public void addHas_Upper_Y_Coordinate(Float newHas_Upper_Y_Coordinate) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_UPPER_Y_COORDINATE, newHas_Upper_Y_Coordinate);
    }

    public void removeHas_Upper_Y_Coordinate(Float oldHas_Upper_Y_Coordinate) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_HAS_UPPER_Y_COORDINATE, oldHas_Upper_Y_Coordinate);
    }


}
