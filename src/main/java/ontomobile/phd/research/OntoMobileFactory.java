package ontomobile.phd.research;

import ontomobile.phd.research.impl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: OntoMobileFactory<br>
 * @version generated on Tue Nov 26 14:33:00 GMT+00:00 2019 by umarriaz
 */
public class OntoMobileFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public OntoMobileFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public OntoMobileFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#'Engobierte_und_tongrundige'_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#'Engobierte_und_tongrundige'_Form_Type", Engobierte_und_tongrundige_Form_Type.class, DefaultEngobierte_und_tongrundige_Form_Type.class);
    }

    /**
     * Creates an instance of type Engobierte_und_tongrundige_Form_Type.  Modifies the underlying ontology.
     */
    public Engobierte_und_tongrundige_Form_Type createEngobierte_und_tongrundige_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ENGOBIERTE_UND_TONGRUNDIGE_FORM_TYPE, DefaultEngobierte_und_tongrundige_Form_Type.class);
    }

    /**
     * Gets an instance of type Engobierte_und_tongrundige_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Engobierte_und_tongrundige_Form_Type getEngobierte_und_tongrundige_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ENGOBIERTE_UND_TONGRUNDIGE_FORM_TYPE, DefaultEngobierte_und_tongrundige_Form_Type.class);
    }

    /**
     * Gets all instances of Engobierte_und_tongrundige_Form_Type from the ontology.
     */
    public Collection<? extends Engobierte_und_tongrundige_Form_Type> getAllEngobierte_und_tongrundige_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ENGOBIERTE_UND_TONGRUNDIGE_FORM_TYPE, DefaultEngobierte_und_tongrundige_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Archaeological_Context
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Archaeological_Context", Archaeological_Context.class, DefaultArchaeological_Context.class);
    }

    /**
     * Creates an instance of type Archaeological_Context.  Modifies the underlying ontology.
     */
    public Archaeological_Context createArchaeological_Context(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARCHAEOLOGICAL_CONTEXT, DefaultArchaeological_Context.class);
    }

    /**
     * Gets an instance of type Archaeological_Context with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Archaeological_Context getArchaeological_Context(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARCHAEOLOGICAL_CONTEXT, DefaultArchaeological_Context.class);
    }

    /**
     * Gets all instances of Archaeological_Context from the ontology.
     */
    public Collection<? extends Archaeological_Context> getAllArchaeological_ContextInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARCHAEOLOGICAL_CONTEXT, DefaultArchaeological_Context.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Artefact
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Artefact", Artefact.class, DefaultArtefact.class);
    }

    /**
     * Creates an instance of type Artefact.  Modifies the underlying ontology.
     */
    public Artefact createArtefact(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ARTEFACT, DefaultArtefact.class);
    }

    /**
     * Gets an instance of type Artefact with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Artefact getArtefact(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ARTEFACT, DefaultArtefact.class);
    }

    /**
     * Gets all instances of Artefact from the ontology.
     */
    public Collection<? extends Artefact> getAllArtefactInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ARTEFACT, DefaultArtefact.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_III
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_III", Bernhard_Group_III.class, DefaultBernhard_Group_III.class);
    }

    /**
     * Creates an instance of type Bernhard_Group_III.  Modifies the underlying ontology.
     */
    public Bernhard_Group_III createBernhard_Group_III(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_III, DefaultBernhard_Group_III.class);
    }

    /**
     * Gets an instance of type Bernhard_Group_III with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bernhard_Group_III getBernhard_Group_III(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_III, DefaultBernhard_Group_III.class);
    }

    /**
     * Gets all instances of Bernhard_Group_III from the ontology.
     */
    public Collection<? extends Bernhard_Group_III> getAllBernhard_Group_IIIInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERNHARD_GROUP_III, DefaultBernhard_Group_III.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIIa
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIIa", Bernhard_Group_IIIa.class, DefaultBernhard_Group_IIIa.class);
    }

    /**
     * Creates an instance of type Bernhard_Group_IIIa.  Modifies the underlying ontology.
     */
    public Bernhard_Group_IIIa createBernhard_Group_IIIa(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIIA, DefaultBernhard_Group_IIIa.class);
    }

    /**
     * Gets an instance of type Bernhard_Group_IIIa with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bernhard_Group_IIIa getBernhard_Group_IIIa(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIIA, DefaultBernhard_Group_IIIa.class);
    }

    /**
     * Gets all instances of Bernhard_Group_IIIa from the ontology.
     */
    public Collection<? extends Bernhard_Group_IIIa> getAllBernhard_Group_IIIaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERNHARD_GROUP_IIIA, DefaultBernhard_Group_IIIa.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIa
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIa", Bernhard_Group_IIa.class, DefaultBernhard_Group_IIa.class);
    }

    /**
     * Creates an instance of type Bernhard_Group_IIa.  Modifies the underlying ontology.
     */
    public Bernhard_Group_IIa createBernhard_Group_IIa(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIA, DefaultBernhard_Group_IIa.class);
    }

    /**
     * Gets an instance of type Bernhard_Group_IIa with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bernhard_Group_IIa getBernhard_Group_IIa(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIA, DefaultBernhard_Group_IIa.class);
    }

    /**
     * Gets all instances of Bernhard_Group_IIa from the ontology.
     */
    public Collection<? extends Bernhard_Group_IIa> getAllBernhard_Group_IIaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERNHARD_GROUP_IIA, DefaultBernhard_Group_IIa.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIb
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIb", Bernhard_Group_IIb.class, DefaultBernhard_Group_IIb.class);
    }

    /**
     * Creates an instance of type Bernhard_Group_IIb.  Modifies the underlying ontology.
     */
    public Bernhard_Group_IIb createBernhard_Group_IIb(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIB, DefaultBernhard_Group_IIb.class);
    }

    /**
     * Gets an instance of type Bernhard_Group_IIb with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bernhard_Group_IIb getBernhard_Group_IIb(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIB, DefaultBernhard_Group_IIb.class);
    }

    /**
     * Gets all instances of Bernhard_Group_IIb from the ontology.
     */
    public Collection<? extends Bernhard_Group_IIb> getAllBernhard_Group_IIbInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERNHARD_GROUP_IIB, DefaultBernhard_Group_IIb.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIc
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_IIc", Bernhard_Group_IIc.class, DefaultBernhard_Group_IIc.class);
    }

    /**
     * Creates an instance of type Bernhard_Group_IIc.  Modifies the underlying ontology.
     */
    public Bernhard_Group_IIc createBernhard_Group_IIc(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIC, DefaultBernhard_Group_IIc.class);
    }

    /**
     * Gets an instance of type Bernhard_Group_IIc with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bernhard_Group_IIc getBernhard_Group_IIc(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IIC, DefaultBernhard_Group_IIc.class);
    }

    /**
     * Gets all instances of Bernhard_Group_IIc from the ontology.
     */
    public Collection<? extends Bernhard_Group_IIc> getAllBernhard_Group_IIcInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERNHARD_GROUP_IIC, DefaultBernhard_Group_IIc.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_Ia
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_Ia", Bernhard_Group_Ia.class, DefaultBernhard_Group_Ia.class);
    }

    /**
     * Creates an instance of type Bernhard_Group_Ia.  Modifies the underlying ontology.
     */
    public Bernhard_Group_Ia createBernhard_Group_Ia(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IA, DefaultBernhard_Group_Ia.class);
    }

    /**
     * Gets an instance of type Bernhard_Group_Ia with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bernhard_Group_Ia getBernhard_Group_Ia(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IA, DefaultBernhard_Group_Ia.class);
    }

    /**
     * Gets all instances of Bernhard_Group_Ia from the ontology.
     */
    public Collection<? extends Bernhard_Group_Ia> getAllBernhard_Group_IaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERNHARD_GROUP_IA, DefaultBernhard_Group_Ia.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_Ib
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Bernhard_Group_Ib", Bernhard_Group_Ib.class, DefaultBernhard_Group_Ib.class);
    }

    /**
     * Creates an instance of type Bernhard_Group_Ib.  Modifies the underlying ontology.
     */
    public Bernhard_Group_Ib createBernhard_Group_Ib(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IB, DefaultBernhard_Group_Ib.class);
    }

    /**
     * Gets an instance of type Bernhard_Group_Ib with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Bernhard_Group_Ib getBernhard_Group_Ib(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BERNHARD_GROUP_IB, DefaultBernhard_Group_Ib.class);
    }

    /**
     * Gets all instances of Bernhard_Group_Ib from the ontology.
     */
    public Collection<? extends Bernhard_Group_Ib> getAllBernhard_Group_IbInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BERNHARD_GROUP_IB, DefaultBernhard_Group_Ib.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Blickweiler
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Blickweiler", Blickweiler.class, DefaultBlickweiler.class);
    }

    /**
     * Creates an instance of type Blickweiler.  Modifies the underlying ontology.
     */
    public Blickweiler createBlickweiler(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BLICKWEILER, DefaultBlickweiler.class);
    }

    /**
     * Gets an instance of type Blickweiler with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Blickweiler getBlickweiler(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BLICKWEILER, DefaultBlickweiler.class);
    }

    /**
     * Gets all instances of Blickweiler from the ontology.
     */
    public Collection<? extends Blickweiler> getAllBlickweilerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BLICKWEILER, DefaultBlickweiler.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Building
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Building", Building.class, DefaultBuilding.class);
    }

    /**
     * Creates an instance of type Building.  Modifies the underlying ontology.
     */
    public Building createBuilding(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUILDING, DefaultBuilding.class);
    }

    /**
     * Gets an instance of type Building with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Building getBuilding(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUILDING, DefaultBuilding.class);
    }

    /**
     * Gets all instances of Building from the ontology.
     */
    public Collection<? extends Building> getAllBuildingInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUILDING, DefaultBuilding.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Building_Phase
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Building_Phase", Building_Phase.class, DefaultBuilding_Phase.class);
    }

    /**
     * Creates an instance of type Building_Phase.  Modifies the underlying ontology.
     */
    public Building_Phase createBuilding_Phase(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_BUILDING_PHASE, DefaultBuilding_Phase.class);
    }

    /**
     * Gets an instance of type Building_Phase with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Building_Phase getBuilding_Phase(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_BUILDING_PHASE, DefaultBuilding_Phase.class);
    }

    /**
     * Gets all instances of Building_Phase from the ontology.
     */
    public Collection<? extends Building_Phase> getAllBuilding_PhaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_BUILDING_PHASE, DefaultBuilding_Phase.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ceramic
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ceramic", Ceramic.class, DefaultCeramic.class);
    }

    /**
     * Creates an instance of type Ceramic.  Modifies the underlying ontology.
     */
    public Ceramic createCeramic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CERAMIC, DefaultCeramic.class);
    }

    /**
     * Gets an instance of type Ceramic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ceramic getCeramic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CERAMIC, DefaultCeramic.class);
    }

    /**
     * Gets all instances of Ceramic from the ontology.
     */
    public Collection<? extends Ceramic> getAllCeramicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CERAMIC, DefaultCeramic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ceramic_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ceramic_Form_Type", Ceramic_Form_Type.class, DefaultCeramic_Form_Type.class);
    }

    /**
     * Creates an instance of type Ceramic_Form_Type.  Modifies the underlying ontology.
     */
    public Ceramic_Form_Type createCeramic_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CERAMIC_FORM_TYPE, DefaultCeramic_Form_Type.class);
    }

    /**
     * Gets an instance of type Ceramic_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ceramic_Form_Type getCeramic_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CERAMIC_FORM_TYPE, DefaultCeramic_Form_Type.class);
    }

    /**
     * Gets all instances of Ceramic_Form_Type from the ontology.
     */
    public Collection<? extends Ceramic_Form_Type> getAllCeramic_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CERAMIC_FORM_TYPE, DefaultCeramic_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ceramics_Production_Centre
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ceramics_Production_Centre", Ceramics_Production_Centre.class, DefaultCeramics_Production_Centre.class);
    }

    /**
     * Creates an instance of type Ceramics_Production_Centre.  Modifies the underlying ontology.
     */
    public Ceramics_Production_Centre createCeramics_Production_Centre(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CERAMICS_PRODUCTION_CENTRE, DefaultCeramics_Production_Centre.class);
    }

    /**
     * Gets an instance of type Ceramics_Production_Centre with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ceramics_Production_Centre getCeramics_Production_Centre(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CERAMICS_PRODUCTION_CENTRE, DefaultCeramics_Production_Centre.class);
    }

    /**
     * Gets all instances of Ceramics_Production_Centre from the ontology.
     */
    public Collection<? extends Ceramics_Production_Centre> getAllCeramics_Production_CentreInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CERAMICS_PRODUCTION_CENTRE, DefaultCeramics_Production_Centre.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Chemery
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Chemery", Chemery.class, DefaultChemery.class);
    }

    /**
     * Creates an instance of type Chemery.  Modifies the underlying ontology.
     */
    public Chemery createChemery(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHEMERY, DefaultChemery.class);
    }

    /**
     * Gets an instance of type Chemery with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Chemery getChemery(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHEMERY, DefaultChemery.class);
    }

    /**
     * Gets all instances of Chemery from the ontology.
     */
    public Collection<? extends Chemery> getAllChemeryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHEMERY, DefaultChemery.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coarse_Ceramic
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coarse_Ceramic", Coarse_Ceramic.class, DefaultCoarse_Ceramic.class);
    }

    /**
     * Creates an instance of type Coarse_Ceramic.  Modifies the underlying ontology.
     */
    public Coarse_Ceramic createCoarse_Ceramic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COARSE_CERAMIC, DefaultCoarse_Ceramic.class);
    }

    /**
     * Gets an instance of type Coarse_Ceramic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Coarse_Ceramic getCoarse_Ceramic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COARSE_CERAMIC, DefaultCoarse_Ceramic.class);
    }

    /**
     * Gets all instances of Coarse_Ceramic from the ontology.
     */
    public Collection<? extends Coarse_Ceramic> getAllCoarse_CeramicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COARSE_CERAMIC, DefaultCoarse_Ceramic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coarse_Ceramic_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coarse_Ceramic_Form_Type", Coarse_Ceramic_Form_Type.class, DefaultCoarse_Ceramic_Form_Type.class);
    }

    /**
     * Creates an instance of type Coarse_Ceramic_Form_Type.  Modifies the underlying ontology.
     */
    public Coarse_Ceramic_Form_Type createCoarse_Ceramic_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COARSE_CERAMIC_FORM_TYPE, DefaultCoarse_Ceramic_Form_Type.class);
    }

    /**
     * Gets an instance of type Coarse_Ceramic_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Coarse_Ceramic_Form_Type getCoarse_Ceramic_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COARSE_CERAMIC_FORM_TYPE, DefaultCoarse_Ceramic_Form_Type.class);
    }

    /**
     * Gets all instances of Coarse_Ceramic_Form_Type from the ontology.
     */
    public Collection<? extends Coarse_Ceramic_Form_Type> getAllCoarse_Ceramic_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COARSE_CERAMIC_FORM_TYPE, DefaultCoarse_Ceramic_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coin_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coin_Form_Type", Coin_Form_Type.class, DefaultCoin_Form_Type.class);
    }

    /**
     * Creates an instance of type Coin_Form_Type.  Modifies the underlying ontology.
     */
    public Coin_Form_Type createCoin_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COIN_FORM_TYPE, DefaultCoin_Form_Type.class);
    }

    /**
     * Gets an instance of type Coin_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Coin_Form_Type getCoin_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COIN_FORM_TYPE, DefaultCoin_Form_Type.class);
    }

    /**
     * Gets all instances of Coin_Form_Type from the ontology.
     */
    public Collection<? extends Coin_Form_Type> getAllCoin_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COIN_FORM_TYPE, DefaultCoin_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Complex
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Complex", Complex.class, DefaultComplex.class);
    }

    /**
     * Creates an instance of type Complex.  Modifies the underlying ontology.
     */
    public Complex createComplex(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COMPLEX, DefaultComplex.class);
    }

    /**
     * Gets an instance of type Complex with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Complex getComplex(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COMPLEX, DefaultComplex.class);
    }

    /**
     * Gets all instances of Complex from the ontology.
     */
    public Collection<? extends Complex> getAllComplexInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COMPLEX, DefaultComplex.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coordinates
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Coordinates", Coordinates.class, DefaultCoordinates.class);
    }

    /**
     * Creates an instance of type Coordinates.  Modifies the underlying ontology.
     */
    public Coordinates createCoordinates(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COORDINATES, DefaultCoordinates.class);
    }

    /**
     * Gets an instance of type Coordinates with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Coordinates getCoordinates(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COORDINATES, DefaultCoordinates.class);
    }

    /**
     * Gets all instances of Coordinates from the ontology.
     */
    public Collection<? extends Coordinates> getAllCoordinatesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COORDINATES, DefaultCoordinates.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Curle_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Curle_Form_Type", Curle_Form_Type.class, DefaultCurle_Form_Type.class);
    }

    /**
     * Creates an instance of type Curle_Form_Type.  Modifies the underlying ontology.
     */
    public Curle_Form_Type createCurle_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CURLE_FORM_TYPE, DefaultCurle_Form_Type.class);
    }

    /**
     * Gets an instance of type Curle_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Curle_Form_Type getCurle_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CURLE_FORM_TYPE, DefaultCurle_Form_Type.class);
    }

    /**
     * Gets all instances of Curle_Form_Type from the ontology.
     */
    public Collection<? extends Curle_Form_Type> getAllCurle_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CURLE_FORM_TYPE, DefaultCurle_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Date_Range
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Date_Range", Date_Range.class, DefaultDate_Range.class);
    }

    /**
     * Creates an instance of type Date_Range.  Modifies the underlying ontology.
     */
    public Date_Range createDate_Range(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DATE_RANGE, DefaultDate_Range.class);
    }

    /**
     * Gets an instance of type Date_Range with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Date_Range getDate_Range(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DATE_RANGE, DefaultDate_Range.class);
    }

    /**
     * Gets all instances of Date_Range from the ontology.
     */
    public Collection<? extends Date_Range> getAllDate_RangeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DATE_RANGE, DefaultDate_Range.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Dragendorff_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Dragendorff_Form_Type", Dragendorff_Form_Type.class, DefaultDragendorff_Form_Type.class);
    }

    /**
     * Creates an instance of type Dragendorff_Form_Type.  Modifies the underlying ontology.
     */
    public Dragendorff_Form_Type createDragendorff_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DRAGENDORFF_FORM_TYPE, DefaultDragendorff_Form_Type.class);
    }

    /**
     * Gets an instance of type Dragendorff_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Dragendorff_Form_Type getDragendorff_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DRAGENDORFF_FORM_TYPE, DefaultDragendorff_Form_Type.class);
    }

    /**
     * Gets all instances of Dragendorff_Form_Type from the ontology.
     */
    public Collection<? extends Dragendorff_Form_Type> getAllDragendorff_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DRAGENDORFF_FORM_TYPE, DefaultDragendorff_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_I
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_I", Drexel_I.class, DefaultDrexel_I.class);
    }

    /**
     * Creates an instance of type Drexel_I.  Modifies the underlying ontology.
     */
    public Drexel_I createDrexel_I(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DREXEL_I, DefaultDrexel_I.class);
    }

    /**
     * Gets an instance of type Drexel_I with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Drexel_I getDrexel_I(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DREXEL_I, DefaultDrexel_I.class);
    }

    /**
     * Gets all instances of Drexel_I from the ontology.
     */
    public Collection<? extends Drexel_I> getAllDrexel_IInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DREXEL_I, DefaultDrexel_I.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_III
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_III", Drexel_III.class, DefaultDrexel_III.class);
    }

    /**
     * Creates an instance of type Drexel_III.  Modifies the underlying ontology.
     */
    public Drexel_III createDrexel_III(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DREXEL_III, DefaultDrexel_III.class);
    }

    /**
     * Gets an instance of type Drexel_III with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Drexel_III getDrexel_III(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DREXEL_III, DefaultDrexel_III.class);
    }

    /**
     * Gets all instances of Drexel_III from the ontology.
     */
    public Collection<? extends Drexel_III> getAllDrexel_IIIInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DREXEL_III, DefaultDrexel_III.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_IIa
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_IIa", Drexel_IIa.class, DefaultDrexel_IIa.class);
    }

    /**
     * Creates an instance of type Drexel_IIa.  Modifies the underlying ontology.
     */
    public Drexel_IIa createDrexel_IIa(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DREXEL_IIA, DefaultDrexel_IIa.class);
    }

    /**
     * Gets an instance of type Drexel_IIa with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Drexel_IIa getDrexel_IIa(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DREXEL_IIA, DefaultDrexel_IIa.class);
    }

    /**
     * Gets all instances of Drexel_IIa from the ontology.
     */
    public Collection<? extends Drexel_IIa> getAllDrexel_IIaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DREXEL_IIA, DefaultDrexel_IIa.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_IIb
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Drexel_IIb", Drexel_IIb.class, DefaultDrexel_IIb.class);
    }

    /**
     * Creates an instance of type Drexel_IIb.  Modifies the underlying ontology.
     */
    public Drexel_IIb createDrexel_IIb(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DREXEL_IIB, DefaultDrexel_IIb.class);
    }

    /**
     * Gets an instance of type Drexel_IIb with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Drexel_IIb getDrexel_IIb(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DREXEL_IIB, DefaultDrexel_IIb.class);
    }

    /**
     * Gets all instances of Drexel_IIb from the ontology.
     */
    public Collection<? extends Drexel_IIb> getAllDrexel_IIbInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DREXEL_IIB, DefaultDrexel_IIb.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#East_Gaul
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#East_Gaul", East_Gaul.class, DefaultEast_Gaul.class);
    }

    /**
     * Creates an instance of type East_Gaul.  Modifies the underlying ontology.
     */
    public East_Gaul createEast_Gaul(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_EAST_GAUL, DefaultEast_Gaul.class);
    }

    /**
     * Gets an instance of type East_Gaul with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public East_Gaul getEast_Gaul(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_EAST_GAUL, DefaultEast_Gaul.class);
    }

    /**
     * Gets all instances of East_Gaul from the ontology.
     */
    public Collection<? extends East_Gaul> getAllEast_GaulInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_EAST_GAUL, DefaultEast_Gaul.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Eschweiler_Hof
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Eschweiler_Hof", Eschweiler_Hof.class, DefaultEschweiler_Hof.class);
    }

    /**
     * Creates an instance of type Eschweiler_Hof.  Modifies the underlying ontology.
     */
    public Eschweiler_Hof createEschweiler_Hof(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ESCHWEILER_HOF, DefaultEschweiler_Hof.class);
    }

    /**
     * Gets an instance of type Eschweiler_Hof with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Eschweiler_Hof getEschweiler_Hof(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ESCHWEILER_HOF, DefaultEschweiler_Hof.class);
    }

    /**
     * Gets all instances of Eschweiler_Hof from the ontology.
     */
    public Collection<? extends Eschweiler_Hof> getAllEschweiler_HofInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ESCHWEILER_HOF, DefaultEschweiler_Hof.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fine_Ceramic
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fine_Ceramic", Fine_Ceramic.class, DefaultFine_Ceramic.class);
    }

    /**
     * Creates an instance of type Fine_Ceramic.  Modifies the underlying ontology.
     */
    public Fine_Ceramic createFine_Ceramic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINE_CERAMIC, DefaultFine_Ceramic.class);
    }

    /**
     * Gets an instance of type Fine_Ceramic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fine_Ceramic getFine_Ceramic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINE_CERAMIC, DefaultFine_Ceramic.class);
    }

    /**
     * Gets all instances of Fine_Ceramic from the ontology.
     */
    public Collection<? extends Fine_Ceramic> getAllFine_CeramicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINE_CERAMIC, DefaultFine_Ceramic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fine_Ceramic_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fine_Ceramic_Form_Type", Fine_Ceramic_Form_Type.class, DefaultFine_Ceramic_Form_Type.class);
    }

    /**
     * Creates an instance of type Fine_Ceramic_Form_Type.  Modifies the underlying ontology.
     */
    public Fine_Ceramic_Form_Type createFine_Ceramic_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FINE_CERAMIC_FORM_TYPE, DefaultFine_Ceramic_Form_Type.class);
    }

    /**
     * Gets an instance of type Fine_Ceramic_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fine_Ceramic_Form_Type getFine_Ceramic_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FINE_CERAMIC_FORM_TYPE, DefaultFine_Ceramic_Form_Type.class);
    }

    /**
     * Gets all instances of Fine_Ceramic_Form_Type from the ontology.
     */
    public Collection<? extends Fine_Ceramic_Form_Type> getAllFine_Ceramic_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FINE_CERAMIC_FORM_TYPE, DefaultFine_Ceramic_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Form_Label
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Form_Label", Form_Label.class, DefaultForm_Label.class);
    }

    /**
     * Creates an instance of type Form_Label.  Modifies the underlying ontology.
     */
    public Form_Label createForm_Label(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORM_LABEL, DefaultForm_Label.class);
    }

    /**
     * Gets an instance of type Form_Label with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Form_Label getForm_Label(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORM_LABEL, DefaultForm_Label.class);
    }

    /**
     * Gets all instances of Form_Label from the ontology.
     */
    public Collection<? extends Form_Label> getAllForm_LabelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORM_LABEL, DefaultForm_Label.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Form_Type", Form_Type.class, DefaultForm_Type.class);
    }

    /**
     * Creates an instance of type Form_Type.  Modifies the underlying ontology.
     */
    public Form_Type createForm_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FORM_TYPE, DefaultForm_Type.class);
    }

    /**
     * Gets an instance of type Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Form_Type getForm_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FORM_TYPE, DefaultForm_Type.class);
    }

    /**
     * Gets all instances of Form_Type from the ontology.
     */
    public Collection<? extends Form_Type> getAllForm_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FORM_TYPE, DefaultForm_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fragment
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fragment", Fragment.class, DefaultFragment.class);
    }

    /**
     * Creates an instance of type Fragment.  Modifies the underlying ontology.
     */
    public Fragment createFragment(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FRAGMENT, DefaultFragment.class);
    }

    /**
     * Gets an instance of type Fragment with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fragment getFragment(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FRAGMENT, DefaultFragment.class);
    }

    /**
     * Gets all instances of Fragment from the ontology.
     */
    public Collection<? extends Fragment> getAllFragmentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FRAGMENT, DefaultFragment.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fragment_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Fragment_Type", Fragment_Type.class, DefaultFragment_Type.class);
    }

    /**
     * Creates an instance of type Fragment_Type.  Modifies the underlying ontology.
     */
    public Fragment_Type createFragment_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FRAGMENT_TYPE, DefaultFragment_Type.class);
    }

    /**
     * Gets an instance of type Fragment_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Fragment_Type getFragment_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FRAGMENT_TYPE, DefaultFragment_Type.class);
    }

    /**
     * Gets all instances of Fragment_Type from the ontology.
     */
    public Collection<? extends Fragment_Type> getAllFragment_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FRAGMENT_TYPE, DefaultFragment_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Function
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Function", Function.class, DefaultFunction.class);
    }

    /**
     * Creates an instance of type Function.  Modifies the underlying ontology.
     */
    public Function createFunction(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets an instance of type Function with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Function getFunction(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }

    /**
     * Gets all instances of Function from the ontology.
     */
    public Collection<? extends Function> getAllFunctionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_FUNCTION, DefaultFunction.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glass
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glass", Glass.class, DefaultGlass.class);
    }

    /**
     * Creates an instance of type Glass.  Modifies the underlying ontology.
     */
    public Glass createGlass(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GLASS, DefaultGlass.class);
    }

    /**
     * Gets an instance of type Glass with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Glass getGlass(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GLASS, DefaultGlass.class);
    }

    /**
     * Gets all instances of Glass from the ontology.
     */
    public Collection<? extends Glass> getAllGlassInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GLASS, DefaultGlass.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glass_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glass_Form_Type", Glass_Form_Type.class, DefaultGlass_Form_Type.class);
    }

    /**
     * Creates an instance of type Glass_Form_Type.  Modifies the underlying ontology.
     */
    public Glass_Form_Type createGlass_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GLASS_FORM_TYPE, DefaultGlass_Form_Type.class);
    }

    /**
     * Gets an instance of type Glass_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Glass_Form_Type getGlass_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GLASS_FORM_TYPE, DefaultGlass_Form_Type.class);
    }

    /**
     * Gets all instances of Glass_Form_Type from the ontology.
     */
    public Collection<? extends Glass_Form_Type> getAllGlass_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GLASS_FORM_TYPE, DefaultGlass_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glass_Production_Centre
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glass_Production_Centre", Glass_Production_Centre.class, DefaultGlass_Production_Centre.class);
    }

    /**
     * Creates an instance of type Glass_Production_Centre.  Modifies the underlying ontology.
     */
    public Glass_Production_Centre createGlass_Production_Centre(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GLASS_PRODUCTION_CENTRE, DefaultGlass_Production_Centre.class);
    }

    /**
     * Gets an instance of type Glass_Production_Centre with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Glass_Production_Centre getGlass_Production_Centre(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GLASS_PRODUCTION_CENTRE, DefaultGlass_Production_Centre.class);
    }

    /**
     * Gets all instances of Glass_Production_Centre from the ontology.
     */
    public Collection<? extends Glass_Production_Centre> getAllGlass_Production_CentreInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GLASS_PRODUCTION_CENTRE, DefaultGlass_Production_Centre.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glazed_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Glazed_Form_Type", Glazed_Form_Type.class, DefaultGlazed_Form_Type.class);
    }

    /**
     * Creates an instance of type Glazed_Form_Type.  Modifies the underlying ontology.
     */
    public Glazed_Form_Type createGlazed_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GLAZED_FORM_TYPE, DefaultGlazed_Form_Type.class);
    }

    /**
     * Gets an instance of type Glazed_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Glazed_Form_Type getGlazed_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GLAZED_FORM_TYPE, DefaultGlazed_Form_Type.class);
    }

    /**
     * Gets all instances of Glazed_Form_Type from the ontology.
     */
    public Collection<? extends Glazed_Form_Type> getAllGlazed_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GLAZED_FORM_TYPE, DefaultGlazed_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Heiligenberg
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Heiligenberg", Heiligenberg.class, DefaultHeiligenberg.class);
    }

    /**
     * Creates an instance of type Heiligenberg.  Modifies the underlying ontology.
     */
    public Heiligenberg createHeiligenberg(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_HEILIGENBERG, DefaultHeiligenberg.class);
    }

    /**
     * Gets an instance of type Heiligenberg with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Heiligenberg getHeiligenberg(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_HEILIGENBERG, DefaultHeiligenberg.class);
    }

    /**
     * Gets all instances of Heiligenberg from the ontology.
     */
    public Collection<? extends Heiligenberg> getAllHeiligenbergInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_HEILIGENBERG, DefaultHeiligenberg.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Imitation_Terra_Sigillata_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Imitation_Terra_Sigillata_Form_Type", Imitation_Terra_Sigillata_Form_Type.class, DefaultImitation_Terra_Sigillata_Form_Type.class);
    }

    /**
     * Creates an instance of type Imitation_Terra_Sigillata_Form_Type.  Modifies the underlying ontology.
     */
    public Imitation_Terra_Sigillata_Form_Type createImitation_Terra_Sigillata_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IMITATION_TERRA_SIGILLATA_FORM_TYPE, DefaultImitation_Terra_Sigillata_Form_Type.class);
    }

    /**
     * Gets an instance of type Imitation_Terra_Sigillata_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Imitation_Terra_Sigillata_Form_Type getImitation_Terra_Sigillata_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IMITATION_TERRA_SIGILLATA_FORM_TYPE, DefaultImitation_Terra_Sigillata_Form_Type.class);
    }

    /**
     * Gets all instances of Imitation_Terra_Sigillata_Form_Type from the ontology.
     */
    public Collection<? extends Imitation_Terra_Sigillata_Form_Type> getAllImitation_Terra_Sigillata_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IMITATION_TERRA_SIGILLATA_FORM_TYPE, DefaultImitation_Terra_Sigillata_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Inscription
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Inscription", Inscription.class, DefaultInscription.class);
    }

    /**
     * Creates an instance of type Inscription.  Modifies the underlying ontology.
     */
    public Inscription createInscription(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INSCRIPTION, DefaultInscription.class);
    }

    /**
     * Gets an instance of type Inscription with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Inscription getInscription(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INSCRIPTION, DefaultInscription.class);
    }

    /**
     * Gets all instances of Inscription from the ontology.
     */
    public Collection<? extends Inscription> getAllInscriptionInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INSCRIPTION, DefaultInscription.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Inscription_OR_Stamp
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Inscription_OR_Stamp", Inscription_OR_Stamp.class, DefaultInscription_OR_Stamp.class);
    }

    /**
     * Creates an instance of type Inscription_OR_Stamp.  Modifies the underlying ontology.
     */
    public Inscription_OR_Stamp createInscription_OR_Stamp(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INSCRIPTION_OR_STAMP, DefaultInscription_OR_Stamp.class);
    }

    /**
     * Gets an instance of type Inscription_OR_Stamp with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Inscription_OR_Stamp getInscription_OR_Stamp(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INSCRIPTION_OR_STAMP, DefaultInscription_OR_Stamp.class);
    }

    /**
     * Gets all instances of Inscription_OR_Stamp from the ontology.
     */
    public Collection<? extends Inscription_OR_Stamp> getAllInscription_OR_StampInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INSCRIPTION_OR_STAMP, DefaultInscription_OR_Stamp.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Isings
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Isings", Isings.class, DefaultIsings.class);
    }

    /**
     * Creates an instance of type Isings.  Modifies the underlying ontology.
     */
    public Isings createIsings(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ISINGS, DefaultIsings.class);
    }

    /**
     * Gets an instance of type Isings with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Isings getIsings(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ISINGS, DefaultIsings.class);
    }

    /**
     * Gets all instances of Isings from the ontology.
     */
    public Collection<? extends Isings> getAllIsingsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ISINGS, DefaultIsings.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ittenweiler
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ittenweiler", Ittenweiler.class, DefaultIttenweiler.class);
    }

    /**
     * Creates an instance of type Ittenweiler.  Modifies the underlying ontology.
     */
    public Ittenweiler createIttenweiler(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ITTENWEILER, DefaultIttenweiler.class);
    }

    /**
     * Gets an instance of type Ittenweiler with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ittenweiler getIttenweiler(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ITTENWEILER, DefaultIttenweiler.class);
    }

    /**
     * Gets all instances of Ittenweiler from the ontology.
     */
    public Collection<? extends Ittenweiler> getAllIttenweilerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ITTENWEILER, DefaultIttenweiler.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Latin_Descriptive_Label
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Latin_Descriptive_Label", Latin_Descriptive_Label.class, DefaultLatin_Descriptive_Label.class);
    }

    /**
     * Creates an instance of type Latin_Descriptive_Label.  Modifies the underlying ontology.
     */
    public Latin_Descriptive_Label createLatin_Descriptive_Label(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LATIN_DESCRIPTIVE_LABEL, DefaultLatin_Descriptive_Label.class);
    }

    /**
     * Gets an instance of type Latin_Descriptive_Label with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Latin_Descriptive_Label getLatin_Descriptive_Label(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LATIN_DESCRIPTIVE_LABEL, DefaultLatin_Descriptive_Label.class);
    }

    /**
     * Gets all instances of Latin_Descriptive_Label from the ontology.
     */
    public Collection<? extends Latin_Descriptive_Label> getAllLatin_Descriptive_LabelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LATIN_DESCRIPTIVE_LABEL, DefaultLatin_Descriptive_Label.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ludowici_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Ludowici_Form_Type", Ludowici_Form_Type.class, DefaultLudowici_Form_Type.class);
    }

    /**
     * Creates an instance of type Ludowici_Form_Type.  Modifies the underlying ontology.
     */
    public Ludowici_Form_Type createLudowici_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_LUDOWICI_FORM_TYPE, DefaultLudowici_Form_Type.class);
    }

    /**
     * Gets an instance of type Ludowici_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ludowici_Form_Type getLudowici_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_LUDOWICI_FORM_TYPE, DefaultLudowici_Form_Type.class);
    }

    /**
     * Gets all instances of Ludowici_Form_Type from the ontology.
     */
    public Collection<? extends Ludowici_Form_Type> getAllLudowici_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_LUDOWICI_FORM_TYPE, DefaultLudowici_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Maker
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Maker", Maker.class, DefaultMaker.class);
    }

    /**
     * Creates an instance of type Maker.  Modifies the underlying ontology.
     */
    public Maker createMaker(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MAKER, DefaultMaker.class);
    }

    /**
     * Gets an instance of type Maker with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Maker getMaker(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MAKER, DefaultMaker.class);
    }

    /**
     * Gets all instances of Maker from the ontology.
     */
    public Collection<? extends Maker> getAllMakerInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MAKER, DefaultMaker.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Material
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Material", Material.class, DefaultMaterial.class);
    }

    /**
     * Creates an instance of type Material.  Modifies the underlying ontology.
     */
    public Material createMaterial(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MATERIAL, DefaultMaterial.class);
    }

    /**
     * Gets an instance of type Material with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Material getMaterial(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MATERIAL, DefaultMaterial.class);
    }

    /**
     * Gets all instances of Material from the ontology.
     */
    public Collection<? extends Material> getAllMaterialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MATERIAL, DefaultMaterial.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Medium_Ceramic
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Medium_Ceramic", Medium_Ceramic.class, DefaultMedium_Ceramic.class);
    }

    /**
     * Creates an instance of type Medium_Ceramic.  Modifies the underlying ontology.
     */
    public Medium_Ceramic createMedium_Ceramic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDIUM_CERAMIC, DefaultMedium_Ceramic.class);
    }

    /**
     * Gets an instance of type Medium_Ceramic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Medium_Ceramic getMedium_Ceramic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDIUM_CERAMIC, DefaultMedium_Ceramic.class);
    }

    /**
     * Gets all instances of Medium_Ceramic from the ontology.
     */
    public Collection<? extends Medium_Ceramic> getAllMedium_CeramicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDIUM_CERAMIC, DefaultMedium_Ceramic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Medium_Ceramic_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Medium_Ceramic_Form_Type", Medium_Ceramic_Form_Type.class, DefaultMedium_Ceramic_Form_Type.class);
    }

    /**
     * Creates an instance of type Medium_Ceramic_Form_Type.  Modifies the underlying ontology.
     */
    public Medium_Ceramic_Form_Type createMedium_Ceramic_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MEDIUM_CERAMIC_FORM_TYPE, DefaultMedium_Ceramic_Form_Type.class);
    }

    /**
     * Gets an instance of type Medium_Ceramic_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Medium_Ceramic_Form_Type getMedium_Ceramic_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MEDIUM_CERAMIC_FORM_TYPE, DefaultMedium_Ceramic_Form_Type.class);
    }

    /**
     * Gets all instances of Medium_Ceramic_Form_Type from the ontology.
     */
    public Collection<? extends Medium_Ceramic_Form_Type> getAllMedium_Ceramic_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MEDIUM_CERAMIC_FORM_TYPE, DefaultMedium_Ceramic_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Metal
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Metal", Metal.class, DefaultMetal.class);
    }

    /**
     * Creates an instance of type Metal.  Modifies the underlying ontology.
     */
    public Metal createMetal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METAL, DefaultMetal.class);
    }

    /**
     * Gets an instance of type Metal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Metal getMetal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METAL, DefaultMetal.class);
    }

    /**
     * Gets all instances of Metal from the ontology.
     */
    public Collection<? extends Metal> getAllMetalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METAL, DefaultMetal.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Metal_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Metal_Form_Type", Metal_Form_Type.class, DefaultMetal_Form_Type.class);
    }

    /**
     * Creates an instance of type Metal_Form_Type.  Modifies the underlying ontology.
     */
    public Metal_Form_Type createMetal_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METAL_FORM_TYPE, DefaultMetal_Form_Type.class);
    }

    /**
     * Gets an instance of type Metal_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Metal_Form_Type getMetal_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METAL_FORM_TYPE, DefaultMetal_Form_Type.class);
    }

    /**
     * Gets all instances of Metal_Form_Type from the ontology.
     */
    public Collection<? extends Metal_Form_Type> getAllMetal_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METAL_FORM_TYPE, DefaultMetal_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Metal_Production_Centre
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Metal_Production_Centre", Metal_Production_Centre.class, DefaultMetal_Production_Centre.class);
    }

    /**
     * Creates an instance of type Metal_Production_Centre.  Modifies the underlying ontology.
     */
    public Metal_Production_Centre createMetal_Production_Centre(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METAL_PRODUCTION_CENTRE, DefaultMetal_Production_Centre.class);
    }

    /**
     * Gets an instance of type Metal_Production_Centre with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Metal_Production_Centre getMetal_Production_Centre(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METAL_PRODUCTION_CENTRE, DefaultMetal_Production_Centre.class);
    }

    /**
     * Gets all instances of Metal_Production_Centre from the ontology.
     */
    public Collection<? extends Metal_Production_Centre> getAllMetal_Production_CentreInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METAL_PRODUCTION_CENTRE, DefaultMetal_Production_Centre.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Middle_Gaul
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Middle_Gaul", Middle_Gaul.class, DefaultMiddle_Gaul.class);
    }

    /**
     * Creates an instance of type Middle_Gaul.  Modifies the underlying ontology.
     */
    public Middle_Gaul createMiddle_Gaul(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MIDDLE_GAUL, DefaultMiddle_Gaul.class);
    }

    /**
     * Gets an instance of type Middle_Gaul with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Middle_Gaul getMiddle_Gaul(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MIDDLE_GAUL, DefaultMiddle_Gaul.class);
    }

    /**
     * Gets all instances of Middle_Gaul from the ontology.
     */
    public Collection<? extends Middle_Gaul> getAllMiddle_GaulInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MIDDLE_GAUL, DefaultMiddle_Gaul.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Mint
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Mint", Mint.class, DefaultMint.class);
    }

    /**
     * Creates an instance of type Mint.  Modifies the underlying ontology.
     */
    public Mint createMint(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MINT, DefaultMint.class);
    }

    /**
     * Gets an instance of type Mint with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mint getMint(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MINT, DefaultMint.class);
    }

    /**
     * Gets all instances of Mint from the ontology.
     */
    public Collection<? extends Mint> getAllMintInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MINT, DefaultMint.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Mittelbron
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Mittelbron", Mittelbron.class, DefaultMittelbron.class);
    }

    /**
     * Creates an instance of type Mittelbron.  Modifies the underlying ontology.
     */
    public Mittelbron createMittelbron(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MITTELBRON, DefaultMittelbron.class);
    }

    /**
     * Gets an instance of type Mittelbron with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Mittelbron getMittelbron(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MITTELBRON, DefaultMittelbron.class);
    }

    /**
     * Gets all instances of Mittelbron from the ontology.
     */
    public Collection<? extends Mittelbron> getAllMittelbronInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MITTELBRON, DefaultMittelbron.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Niederbieber_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Niederbieber_Form_Type", Niederbieber_Form_Type.class, DefaultNiederbieber_Form_Type.class);
    }

    /**
     * Creates an instance of type Niederbieber_Form_Type.  Modifies the underlying ontology.
     */
    public Niederbieber_Form_Type createNiederbieber_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NIEDERBIEBER_FORM_TYPE, DefaultNiederbieber_Form_Type.class);
    }

    /**
     * Gets an instance of type Niederbieber_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Niederbieber_Form_Type getNiederbieber_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NIEDERBIEBER_FORM_TYPE, DefaultNiederbieber_Form_Type.class);
    }

    /**
     * Gets all instances of Niederbieber_Form_Type from the ontology.
     */
    public Collection<? extends Niederbieber_Form_Type> getAllNiederbieber_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NIEDERBIEBER_FORM_TYPE, DefaultNiederbieber_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Production_Centre
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Production_Centre", Production_Centre.class, DefaultProduction_Centre.class);
    }

    /**
     * Creates an instance of type Production_Centre.  Modifies the underlying ontology.
     */
    public Production_Centre createProduction_Centre(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PRODUCTION_CENTRE, DefaultProduction_Centre.class);
    }

    /**
     * Gets an instance of type Production_Centre with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Production_Centre getProduction_Centre(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PRODUCTION_CENTRE, DefaultProduction_Centre.class);
    }

    /**
     * Gets all instances of Production_Centre from the ontology.
     */
    public Collection<? extends Production_Centre> getAllProduction_CentreInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PRODUCTION_CENTRE, DefaultProduction_Centre.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Raetia
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Raetia", Raetia.class, DefaultRaetia.class);
    }

    /**
     * Creates an instance of type Raetia.  Modifies the underlying ontology.
     */
    public Raetia createRaetia(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAETIA, DefaultRaetia.class);
    }

    /**
     * Gets an instance of type Raetia with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Raetia getRaetia(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAETIA, DefaultRaetia.class);
    }

    /**
     * Gets all instances of Raetia from the ontology.
     */
    public Collection<? extends Raetia> getAllRaetiaInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAETIA, DefaultRaetia.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Raetische_Ware_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Raetische_Ware_Form_Type", Raetische_Ware_Form_Type.class, DefaultRaetische_Ware_Form_Type.class);
    }

    /**
     * Creates an instance of type Raetische_Ware_Form_Type.  Modifies the underlying ontology.
     */
    public Raetische_Ware_Form_Type createRaetische_Ware_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RAETISCHE_WARE_FORM_TYPE, DefaultRaetische_Ware_Form_Type.class);
    }

    /**
     * Gets an instance of type Raetische_Ware_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Raetische_Ware_Form_Type getRaetische_Ware_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RAETISCHE_WARE_FORM_TYPE, DefaultRaetische_Ware_Form_Type.class);
    }

    /**
     * Gets all instances of Raetische_Ware_Form_Type from the ontology.
     */
    public Collection<? extends Raetische_Ware_Form_Type> getAllRaetische_Ware_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RAETISCHE_WARE_FORM_TYPE, DefaultRaetische_Ware_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Rheinische_Ware
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Rheinische_Ware", Rheinische_Ware.class, DefaultRheinische_Ware.class);
    }

    /**
     * Creates an instance of type Rheinische_Ware.  Modifies the underlying ontology.
     */
    public Rheinische_Ware createRheinische_Ware(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RHEINISCHE_WARE, DefaultRheinische_Ware.class);
    }

    /**
     * Gets an instance of type Rheinische_Ware with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rheinische_Ware getRheinische_Ware(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RHEINISCHE_WARE, DefaultRheinische_Ware.class);
    }

    /**
     * Gets all instances of Rheinische_Ware from the ontology.
     */
    public Collection<? extends Rheinische_Ware> getAllRheinische_WareInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RHEINISCHE_WARE, DefaultRheinische_Ware.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Rheinzabern
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Rheinzabern", Rheinzabern.class, DefaultRheinzabern.class);
    }

    /**
     * Creates an instance of type Rheinzabern.  Modifies the underlying ontology.
     */
    public Rheinzabern createRheinzabern(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_RHEINZABERN, DefaultRheinzabern.class);
    }

    /**
     * Gets an instance of type Rheinzabern with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Rheinzabern getRheinzabern(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_RHEINZABERN, DefaultRheinzabern.class);
    }

    /**
     * Gets all instances of Rheinzabern from the ontology.
     */
    public Collection<? extends Rheinzabern> getAllRheinzabernInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_RHEINZABERN, DefaultRheinzabern.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Schwäbische
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Schwäbische", Schwäbische.class, DefaultSchwäbische.class);
    }

    /**
     * Creates an instance of type Schwäbische.  Modifies the underlying ontology.
     */
    public Schwäbische createSchwäbische(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCHWÄBISCHE, DefaultSchwäbische.class);
    }

    /**
     * Gets an instance of type Schwäbische with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Schwäbische getSchwäbische(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCHWÄBISCHE, DefaultSchwäbische.class);
    }

    /**
     * Gets all instances of Schwäbische from the ontology.
     */
    public Collection<? extends Schwäbische> getAllSchwäbischeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCHWÄBISCHE, DefaultSchwäbische.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Site
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Site", Site.class, DefaultSite.class);
    }

    /**
     * Creates an instance of type Site.  Modifies the underlying ontology.
     */
    public Site createSite(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITE, DefaultSite.class);
    }

    /**
     * Gets an instance of type Site with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Site getSite(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITE, DefaultSite.class);
    }

    /**
     * Gets all instances of Site from the ontology.
     */
    public Collection<? extends Site> getAllSiteInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITE, DefaultSite.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Site_Phase
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Site_Phase", Site_Phase.class, DefaultSite_Phase.class);
    }

    /**
     * Creates an instance of type Site_Phase.  Modifies the underlying ontology.
     */
    public Site_Phase createSite_Phase(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SITE_PHASE, DefaultSite_Phase.class);
    }

    /**
     * Gets an instance of type Site_Phase with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Site_Phase getSite_Phase(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SITE_PHASE, DefaultSite_Phase.class);
    }

    /**
     * Gets all instances of Site_Phase from the ontology.
     */
    public Collection<? extends Site_Phase> getAllSite_PhaseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SITE_PHASE, DefaultSite_Phase.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Skeletal_Material
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Skeletal_Material", Skeletal_Material.class, DefaultSkeletal_Material.class);
    }

    /**
     * Creates an instance of type Skeletal_Material.  Modifies the underlying ontology.
     */
    public Skeletal_Material createSkeletal_Material(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SKELETAL_MATERIAL, DefaultSkeletal_Material.class);
    }

    /**
     * Gets an instance of type Skeletal_Material with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Skeletal_Material getSkeletal_Material(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SKELETAL_MATERIAL, DefaultSkeletal_Material.class);
    }

    /**
     * Gets all instances of Skeletal_Material from the ontology.
     */
    public Collection<? extends Skeletal_Material> getAllSkeletal_MaterialInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SKELETAL_MATERIAL, DefaultSkeletal_Material.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#South_Gaul
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#South_Gaul", South_Gaul.class, DefaultSouth_Gaul.class);
    }

    /**
     * Creates an instance of type South_Gaul.  Modifies the underlying ontology.
     */
    public South_Gaul createSouth_Gaul(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SOUTH_GAUL, DefaultSouth_Gaul.class);
    }

    /**
     * Gets an instance of type South_Gaul with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public South_Gaul getSouth_Gaul(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SOUTH_GAUL, DefaultSouth_Gaul.class);
    }

    /**
     * Gets all instances of South_Gaul from the ontology.
     */
    public Collection<? extends South_Gaul> getAllSouth_GaulInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SOUTH_GAUL, DefaultSouth_Gaul.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Stamp
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Stamp", Stamp.class, DefaultStamp.class);
    }

    /**
     * Creates an instance of type Stamp.  Modifies the underlying ontology.
     */
    public Stamp createStamp(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STAMP, DefaultStamp.class);
    }

    /**
     * Gets an instance of type Stamp with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Stamp getStamp(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STAMP, DefaultStamp.class);
    }

    /**
     * Gets all instances of Stamp from the ontology.
     */
    public Collection<? extends Stamp> getAllStampInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STAMP, DefaultStamp.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Structure
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Structure", Structure.class, DefaultStructure.class);
    }

    /**
     * Creates an instance of type Structure.  Modifies the underlying ontology.
     */
    public Structure createStructure(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STRUCTURE, DefaultStructure.class);
    }

    /**
     * Gets an instance of type Structure with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Structure getStructure(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STRUCTURE, DefaultStructure.class);
    }

    /**
     * Gets all instances of Structure from the ontology.
     */
    public Collection<? extends Structure> getAllStructureInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STRUCTURE, DefaultStructure.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Technik_b
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Technik_b", Technik_b.class, DefaultTechnik_b.class);
    }

    /**
     * Creates an instance of type Technik_b.  Modifies the underlying ontology.
     */
    public Technik_b createTechnik_b(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TECHNIK_B, DefaultTechnik_b.class);
    }

    /**
     * Gets an instance of type Technik_b with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Technik_b getTechnik_b(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TECHNIK_B, DefaultTechnik_b.class);
    }

    /**
     * Gets all instances of Technik_b from the ontology.
     */
    public Collection<? extends Technik_b> getAllTechnik_bInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TECHNIK_B, DefaultTechnik_b.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#TempCategory
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#TempCategory", TempCategory.class, DefaultTempCategory.class);
    }

    /**
     * Creates an instance of type TempCategory.  Modifies the underlying ontology.
     */
    public TempCategory createTempCategory(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEMPCATEGORY, DefaultTempCategory.class);
    }

    /**
     * Gets an instance of type TempCategory with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public TempCategory getTempCategory(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEMPCATEGORY, DefaultTempCategory.class);
    }

    /**
     * Gets all instances of TempCategory from the ontology.
     */
    public Collection<? extends TempCategory> getAllTempCategoryInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEMPCATEGORY, DefaultTempCategory.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Terra_Nigra_or_Terra_Nigra_like_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Terra_Nigra_or_Terra_Nigra_like_Form_Type", Terra_Nigra_or_Terra_Nigra_like_Form_Type.class, DefaultTerra_Nigra_or_Terra_Nigra_like_Form_Type.class);
    }

    /**
     * Creates an instance of type Terra_Nigra_or_Terra_Nigra_like_Form_Type.  Modifies the underlying ontology.
     */
    public Terra_Nigra_or_Terra_Nigra_like_Form_Type createTerra_Nigra_or_Terra_Nigra_like_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TERRA_NIGRA_OR_TERRA_NIGRA_LIKE_FORM_TYPE, DefaultTerra_Nigra_or_Terra_Nigra_like_Form_Type.class);
    }

    /**
     * Gets an instance of type Terra_Nigra_or_Terra_Nigra_like_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Terra_Nigra_or_Terra_Nigra_like_Form_Type getTerra_Nigra_or_Terra_Nigra_like_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TERRA_NIGRA_OR_TERRA_NIGRA_LIKE_FORM_TYPE, DefaultTerra_Nigra_or_Terra_Nigra_like_Form_Type.class);
    }

    /**
     * Gets all instances of Terra_Nigra_or_Terra_Nigra_like_Form_Type from the ontology.
     */
    public Collection<? extends Terra_Nigra_or_Terra_Nigra_like_Form_Type> getAllTerra_Nigra_or_Terra_Nigra_like_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TERRA_NIGRA_OR_TERRA_NIGRA_LIKE_FORM_TYPE, DefaultTerra_Nigra_or_Terra_Nigra_like_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Terra_Sigillata_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Terra_Sigillata_Form_Type", Terra_Sigillata_Form_Type.class, DefaultTerra_Sigillata_Form_Type.class);
    }

    /**
     * Creates an instance of type Terra_Sigillata_Form_Type.  Modifies the underlying ontology.
     */
    public Terra_Sigillata_Form_Type createTerra_Sigillata_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TERRA_SIGILLATA_FORM_TYPE, DefaultTerra_Sigillata_Form_Type.class);
    }

    /**
     * Gets an instance of type Terra_Sigillata_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Terra_Sigillata_Form_Type getTerra_Sigillata_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TERRA_SIGILLATA_FORM_TYPE, DefaultTerra_Sigillata_Form_Type.class);
    }

    /**
     * Gets all instances of Terra_Sigillata_Form_Type from the ontology.
     */
    public Collection<? extends Terra_Sigillata_Form_Type> getAllTerra_Sigillata_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TERRA_SIGILLATA_FORM_TYPE, DefaultTerra_Sigillata_Form_Type.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Upper_German
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Upper_German", Upper_German.class, DefaultUpper_German.class);
    }

    /**
     * Creates an instance of type Upper_German.  Modifies the underlying ontology.
     */
    public Upper_German createUpper_German(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UPPER_GERMAN, DefaultUpper_German.class);
    }

    /**
     * Gets an instance of type Upper_German with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Upper_German getUpper_German(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UPPER_GERMAN, DefaultUpper_German.class);
    }

    /**
     * Gets all instances of Upper_German from the ontology.
     */
    public Collection<? extends Upper_German> getAllUpper_GermanInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UPPER_GERMAN, DefaultUpper_German.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Utilitarian_Ceramic
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Utilitarian_Ceramic", Utilitarian_Ceramic.class, DefaultUtilitarian_Ceramic.class);
    }

    /**
     * Creates an instance of type Utilitarian_Ceramic.  Modifies the underlying ontology.
     */
    public Utilitarian_Ceramic createUtilitarian_Ceramic(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UTILITARIAN_CERAMIC, DefaultUtilitarian_Ceramic.class);
    }

    /**
     * Gets an instance of type Utilitarian_Ceramic with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Utilitarian_Ceramic getUtilitarian_Ceramic(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UTILITARIAN_CERAMIC, DefaultUtilitarian_Ceramic.class);
    }

    /**
     * Gets all instances of Utilitarian_Ceramic from the ontology.
     */
    public Collection<? extends Utilitarian_Ceramic> getAllUtilitarian_CeramicInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UTILITARIAN_CERAMIC, DefaultUtilitarian_Ceramic.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Utilitarian_Ceramic_Form_Type
     */

    {
        javaMapping.add("http://www.semanticweb.org/daan/ontologies/2016/3/BDRTontology#Utilitarian_Ceramic_Form_Type", Utilitarian_Ceramic_Form_Type.class, DefaultUtilitarian_Ceramic_Form_Type.class);
    }

    /**
     * Creates an instance of type Utilitarian_Ceramic_Form_Type.  Modifies the underlying ontology.
     */
    public Utilitarian_Ceramic_Form_Type createUtilitarian_Ceramic_Form_Type(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UTILITARIAN_CERAMIC_FORM_TYPE, DefaultUtilitarian_Ceramic_Form_Type.class);
    }

    /**
     * Gets an instance of type Utilitarian_Ceramic_Form_Type with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Utilitarian_Ceramic_Form_Type getUtilitarian_Ceramic_Form_Type(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UTILITARIAN_CERAMIC_FORM_TYPE, DefaultUtilitarian_Ceramic_Form_Type.class);
    }

    /**
     * Gets all instances of Utilitarian_Ceramic_Form_Type from the ontology.
     */
    public Collection<? extends Utilitarian_Ceramic_Form_Type> getAllUtilitarian_Ceramic_Form_TypeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_UTILITARIAN_CERAMIC_FORM_TYPE, DefaultUtilitarian_Ceramic_Form_Type.class);
    }


}
